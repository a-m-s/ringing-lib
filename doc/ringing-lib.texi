\input texinfo @c -*-texinfo-*-
@c Ringing Class Library manual
@c $Id$
@c %**start of header
@setfilename ringing-lib.info
@settitle The Ringing Class Library
@iftex
@afourpaper
@end iftex
@c %**end of header

@include version.texi

@ifinfo
@dircategory Libraries
@direntry
* Ringing-lib: (ringing-lib).   The Ringing Class Library.
@end direntry
@end ifinfo

@ifnottex
This is the manual for the Ringing Class Library, version
@value{VERSION}.  Last updated @value{UPDATED}.

Copyright 2001 Martin Bright and Mark Banner

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1
or any later version published by the Free Software Foundation;
with no the Invariant Sections, with no Front-Cover Texts, 
and with no Back-Cover Texts.  A copy of the license is included in 
the section entitled ``GNU Free Documentation License''.
@end ifnottex

@titlepage
@title The Ringing Class Library
@author Martin Bright
@author Mark Banner

@page
@vskip 0pt plus 1filll
Version @value{VERSION}.  Last updated @value{UPDATED}.

Copyright @copyright{} 2001 Martin Bright and Mark Banner

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1
or any later version published by the Free Software Foundation;
with no the Invariant Sections, with no the Front-Cover Texts being, 
and with no Back-Cover Texts.  A copy of the license is included in 
the section entitled ``GNU Free Documentation License''.

This document was produced using GNU Texinfo. On-line versions in both
HTML and GNU Info formats are also available.
@end titlepage
@ifnottex

@node Top, Introduction, (dir), (dir)
@top
@ifinfo

The Ringing Class Library (ringing-lib) is a library of C++ classes designed
for writing change ringing application programs.

This menu lists the available topics in the documentation. This
documentation is also available in HTML and PostScript versions.
@end ifinfo
@ifhtml
The Ringing Class Library (ringing-lib) is a library of C++ classes designed
for writing change ringing application programs.

This menu lists the available topics in the documentation. This
documentation is also available in GNU Info and PostScript 
versions.
@end ifhtml
@end ifnottex

@menu
* Introduction::                
* Installing and using the library::  
* Rows and Changes::            
* Methods::                     
* Method Libraries::            
* Proof::                       
* Musical Analysis::            
* Method classification::       
* Producing printed output::    
* Copying this manual::         
* Index::                       
@end menu

@node Introduction, Installing and using the library, Top, Top
@chapter Introduction
@cindex introduction

The Ringing Class Library is a collection of C++ classes which implement
various concepts found in change ringing, and make it possible to
implement programs which use these concepts without having to write the
basic algorithms over and over again.

The library is split into several sections:
@itemize @bullet
@item
Classes for dealing with individual rows and changes, and how the
interact with each other;

@item
Classes for building and manipulating methods;

@item
Classes for accessing method libraries;

@item
Classes for proving and analysing sequences of rows;

@item
Classes for producing printed output.
@end itemize

Thus it is possible to use whatever part of the library is necessary for
your program; for example, a method editing program would use the method
classes, whereas a program to simulate call changes would just use the
row and change classes.

To get information about latest releases of the Ringing Class Library,
to report bugs, request features, use forums and access the CVS
repository, visit the project web page at
@uref{http://ringing-lib.sourceforge.net}.

@node Installing and using the library, Rows and Changes, Introduction, Top
@chapter Installing and using the library
@cindex installation

The Ringing Class Library has been developed primarily for use on
Unix-like and Microsoft Windows platforms.  As the library is written in
portable C++ and uses only standard library functions, it should be
possible to use it on any standard-conforming platform.  If you do find
a platform on which it is not possible to compile and use the library,
the authors would be interested to hear about it.

Various characteristics of the C++ compiler need to be determined before
compiling the library, and are assumed to be that same when the library
is compiled and linked into an application.  If you get a new C++
compiler or a new standard C++ library, you should reconfigure and
(probably) recompile the library before trying to use it in an
application.  The necessary data is stored in @file{ringing/common.h}:
on Unix systems this file is generated automatically; on other systems,
you may have to generate it by hand from the template in
@file{ringing/common.h.in}.

@menu
* The Standard Template Library::  
* Unix-like systems::           
* Microsoft Windows::           
* Using the library in your programs::  
@end menu

@node The Standard Template Library, Unix-like systems, Installing and using the library, Installing and using the library
@section The Standard Template Library
@cindex Standard Template Library
@cindex STL

Before you can use the Ringing Class Library, you will need to have a
copy of the Standard Template Library (@acronym{STL}) which works with
your compiler. The @acronym{STL} is a set of templates which define
containers such as lists and sets, iterators to move through them, and
various other useful things.  If your compiler complains about not being
able to find files such as @file{vector.h} and @file{list.h} then this
probably means that you don't have the @acronym{STL} and need to get
hold of it.

A suitable version of the @acronym{STL} is included with most major C++
compilers.  If you don't have a working version, you may be able to
download one: in particular, there is a free implementation of the
@acronym{STL} available currently at @uref{http://www.sgi.com/tech/stl}.
Implementations differ slightly in how the header files are named and
whether namespaces are used.  If you are compiling the Ringing Class
Library on a Unix-like platform, the configuration process should take
care of finding out how your particular implementation works.
Otherwise, you will need to edit the file @file{ringing/common.h.in}
before compiling.

@node Unix-like systems, Microsoft Windows, The Standard Template Library, Installing and using the library
@section Unix-like systems

The Ringing Class Library package uses the GNU tool @command{autoconf}
to take away the problems of coping with differences between platforms.  
This means that you should be able to change to the top-level directory
of the source distribution and type
@example
./configure
@end example
@noindent
to configure the package.  This will determine the characteristics of
your C++ compiler and create a file @file{ringing/common.h} which defines
various symbols used in the compilation.  This file is also installed
with the rest of the class library, so that the installed header files
will have access to it.

You can control many aspects of how the package is compiled and installed
by passing arguments to the @command{configure} script; for example, you 
can control where the library is installed (for example, in @file{/usr/lib}
or @file{/usr/local/lib}).  For details of all the options which are
accepted, type
@example
./configure --help
@end example
@noindent
in the top-level directory of the distribution.  Some more instructions
for using the @command{configure} script are given in the file
@file{INSTALL}.

At the moment it is only possible to create a version of the library for
static linking; in the near future we hope to use GNU Libtool to provide
a portable mechanism for creating shared libraries.

@node Microsoft Windows, Using the library in your programs, Unix-like systems, Installing and using the library
@section Microsoft Windows

When compiling on Microsoft Windows, the range of different compilers and
lack of a standard powerful scripting language make it difficult to
provide a genuinely portable infrastructure to the package.  However, the
task of compiling and installing the library is not complicated, and easy
to achieve by hand.  The following steps are necessary:
@itemize @bullet
@item Create the file @file{ringing/common.h} by editing @file{common.h.in}
to reflect the characteristics of your C++ compiler;

@item Compile all the @file{.cpp} source files in the @file{ringing}
subdirectory into a library, which you will probably want to call
@file{ringing.lib};

@item Install the compiled library and the header files in places where
your compiler and linker will be able to find them;

@item Copy the documentation to somewhere permanent.
@end itemize

Note that the header files are designed to be included from a
subdirectory called @file{ringing} within your system's collection of
header files.

If you are using Microsoft Developer Studio, then you can use the
supplied workspace file @file{ringing-lib.dsw} to accomplish the
compiling and linking of the library without any effort.

Currently the class library should normally be compiled into a static
library (@file{.lib} file).  It is not yet straightforward to make the
library into a DLL; if you choose to do this, you are on your own but
the authors would be please to hear of any success.

@node Using the library in your programs,  , Microsoft Windows, Installing and using the library
@section Using the library in your programs

To use the Ringing Class Library in your programs, you simply include
the relevant header files in your source code, and then link the library
into your final program.

Header files are expected to be found in the subdirectory @file{ringing};
thus you might type
@example
#include <ringing/row.h>
#include <ringing/proof.h>
@end example
@noindent
at the top of a C++ source code file.  If this does not work, either your
compiler is not looking in the right place for the header files, or you
have not installed them in the right place.  You may be able to correct
this by adding an option (@code{-I} on most systems) to your compiler
command line.

To link to the installed library, simply add the appropriate option to
the command line when linking your program.  On most Unix systems, you
will have to add @code{-lringing} to link with the library.

@node Rows and Changes, Methods, Installing and using the library, Top
@chapter Row and Change classes
@cindex row
@cindex change

Classes for manupulating rows and changes, and all the other classes and
functions described in this chapter, are declared in @file{ringing/row.h}.

For ease of notation, I am using the idea that a @dfn{row} is an
individual permutation of bells (such as @samp{13572468}), and a
@dfn{change} is a means of getting from one row to another, by swapping
pairs of bells; the most convenient way to write a change is a place
notation (for example @samp{X} or @samp{1258}).

@menu
* Row Operations::              Explanation of algebra on rows
* Row Properties::              Explanation of other properties of rows
* Changes::                     How ringing-lib deals with changes
* The bell Class::              
* The row Class::               
* The change Class::            
* The permute function::        
* The row_block class::         
* Other functions in row.h::    
@end menu

@node Row Operations, Row Properties, Rows and Changes, Rows and Changes
@section Row operations
@cindex row algebra
@cindex algebra of rows
@cindex row operations
@cindex transposition

Rows have a set of operations which we can use on them; in mathematical
terms, they form a group. The most important operation is that of row
multiplication or transposition - in this operation, the bells in one
row are rearranged according to the order given by another row.

For example,
@example
21345678 * 13572468 = 23571468
@end example
@noindent and
@example
13572468 * 21345678 = 31572468
@end example

Note that the two above examples do @emph{not} give the same result;
that is, the order in which two things are multiplied does matter.

As an example of how row multiplication is used, suppose that we want to
know the 4th row of the lead of Plain Bob Major with lead head
@samp{17856342}. The 4th row of the first lead (which has a lead head of
rounds) is @samp{42618375}. Multiplying these together gives us the
answer we are looking for, namely @samp{57312846}.

The identity for this operation is rounds; in other words, any row
multiplied by rounds gives itself, and rounds multiplied by any row
gives that row.

It is possible to define the inverse of a row as the row which, when
multiplied by that row, will give rounds. For example, the inverse of
@samp{13572468} is @samp{15263748}, as 
@example
13572468 * 15263748 = 12345678
@end example

The opposite of row multiplication is row division. If @samp{a * b = c},
we can define @samp{c / b = a}. Using the same example as above, suppose
we have a lead of Plain Bob Major and we know that the fourth row is
@samp{57312846}, and we wish to find the lead head. Just divide by the
fourth row of the plain course (@samp{42618375}) to get the answer.

@node Row Properties, Changes, Row Operations, Rows and Changes
@section Row properties
@cindex row properties

There are several properties of rows which arise from group theory and
can be useful in looking at properties of methods.

@cindex order
The @dfn{order} of a row is the number of times which that row has to be
multiplied by itself before it gets back to rounds. For example, the row
@samp{21436587} has order 2, because if it is multiplied by itself
twice, you get back to rounds. Similarly the row @samp{23145678} has
order 3, and the row @samp{23456781} has order 8. This can be useful,
for example, in seeing how many leads of a method are needed in a plain
course before it comes round.

@cindex sign
@cindex parity
Another useful concept is the @dfn{sign} or @dfn{parity} of a row. A row
is considered @dfn{even} if it takes an even number of swaps of pairs of
bells to get from rounds to that row, and @dfn{odd} if it takes an odd
number of swaps. (It can be shown that whether the number is odd or even
doesn't depend on exactly what the sequence of swaps is).

@cindex cycles
Finally, every row can be expressed as a set of @dfn{cycles}. A cycle is
a set of bells which move round in a sequential way as the row is
repeated; for example, @samp{21345678} has only one cycle, which is
@samp{(12)}; and @samp{12356478} has one cycle, which is
@samp{(456)}. Combining these two cycles will give us the row @samp{213564678}.

@node Changes, The bell Class, Row Properties, Rows and Changes
@section Changes
@cindex change

A @dfn{change} is a means for getting from one row to another. It works
by swapping over pairs of bells, and no bell may move more than one
place.

@cindex place notation
@cindex swap
The normal way of representing a change is by place notation; a single
change is represented by a series of numbers which each correspond to a
place being made; for example, @samp{12} means that all bells swap,
apart from the 1 and the 2, which stay in the same place. If all the
bells swap, the place notation is @samp{X}.

@node The bell Class, The row Class, Changes, Rows and Changes
@section The @code{bell} class
@cindex @code{bell} class

The @code{bell} class represents a single bell.  An object of type
@code{bell} is essentially an integer, and bells are numbered starting
with the treble as 0.  Member functions are provided to convert between
this numerical representation and a printable character.

@menu
* bell Derivation::             
* bell Constructors::           
* bell Operators::              
* Other bell Functions::        
@end menu

@node bell Derivation, bell Constructors, The bell Class, The bell Class
@subsection Derivation

This class is not derived from any other classes.

@example
class bell;
@end example

@node bell Constructors, bell Operators, bell Derivation, The bell Class
@subsection Constructors

@deftypefn Constructor {} bell::bell (void);
This constructor initialises the bell object to zero (0).
@end deftypefn

@deftypefn Constructor {} bell::bell (int @var{i});
This constructor initialises the bell object to the integer @var{i},
where bells are numbered starting from 0.
@end deftypefn

@node bell Operators, Other bell Functions, bell Constructors, The bell Class
@subsection Operators

@deftypefn Operator bell& bell::operator= (int @var{i});
This assigns the integer value @var{i} to the bell object, where bells
are numbered starting from 0.
@end deftypefn

@deftypefn Operator int {bell::operator int} (void);
This casts a bell object to the corresponding integer.
@end deftypefn

@deftypefn Operator ostream& operator<< (ostream& @var{o}, const bell
@var{b});
This operator writes the character representing the bell @var{b} to the
output stream @var{o}.
@end deftypefn

@node Other bell Functions,  , bell Operators, The bell Class
@subsection Other functions

@deftypefun void bell::from_char (char @var{c});
This function interprets the character @var{c} as a bell, and assigns
that value to the bell object.  See the next function for the mapping
between characters and bells.
@end deftypefun

@deftypefun char bell::to_char (void) const;
This function returns a character indicating the bell represented by the
object.  The characters used are, in order:
@example
1234567890ETABCDFGHJKLMNPQRSUVWYZ
@end example
@end deftypefun

@node The row Class, The change Class, The bell Class, Rows and Changes
@section The @code{row} class
@cindex @code{row} class

The @code{row} class stores a single row. It provides extensive
functions to manipulate rows and perform operations on them.

@menu
* row Derivation::              
* row Constructors::            
* row Operators::               
* Other row Functions::         
* row static Functions::        
@end menu

@node row Derivation, row Constructors, The row Class, The row Class
@subsection Derivation

This class is not derived from any other classes.

@example
class row;
@end example

@node row Constructors, row Operators, row Derivation, The row Class
@subsection Constructors

@deftypefn Constructor {} row::row (void);
This constructs an empty row.
@end deftypefn

@deftypefn Constructor explicit row::row (int @var{bells});
This constructs an empty row, where @var{bells} is the number of bells
which the row is to contain.  Note that it is not initialised to
anything.
@end deftypefn

@deftypefn Constructor {} row::row (const char* @var{s});
This constructs a row from a string, which should be the textual
representation of the row you wish to construct, for example
@samp{"135246"} or @samp{"2143658709TE"}.
@end deftypefn

@deftypefn Constructor {} row::row (const row& @var{r});
This is the copy constructor; it creates a copy of the given row.
@end deftypefn

@node row Operators, Other row Functions, row Constructors, The row Class
@subsection Operators

@deftypefn Operator row& row::operator= (const row& @var{r});
This copies one row to another.
@end deftypefn

@deftypefn Operator row& row::operator= (const char* @var{s});
This sets the value of a row, given a string. The string @var{s} should
contain a textual representation of a row, such as @samp{21436587}.
@end deftypefn

@deftypefn Operator int row::operator== (const row& @var{r}) const;
@deftypefnx Operator int row::operator!= (const row& @var{r}) const;
These compare two rows.
@end deftypefn

@deftypefn Operator bell row::operator[] (int @var{i}) const;
This returns the @var{i}th bell in the row.  Note that this is not an
lvalue, so you cannot assign a value to an individual bell in a row.
@end deftypefn

@deftypefn Operator row row::operator* (const row& @var{r}) const;
@deftypefnx Operator row& row::operator*= (const row& @var{r});
These functions multiply two rows together as explained above.  If the
rows are not of the same length, the shorter row is considered to be
first padded out to the length of the longer row by adding the extra
bells in order at the end.
@end deftypefn

@deftypefn Operator row row::operator/ (const row& @var{r}) const;
@deftypefnx Operator row& row::operator/= (const row& @var{r});
These functions divide two rows, as explained above.  If the rows are
not of the same length, the shorter row is padded as for multiplication.
@end deftypefn

@deftypefn Operator row& operator*= (row& @var{r}, const change& @var{c});
@deftypefnx Operator row row::operator* (const change& @var{c}) const;
These functions apply a change to a row.  If the number of bells @var{c}
differs from the number of bells in @var{r}, then @var{c} is considered
to be padded or truncated in the obvious way.
@end deftypefn

@deftypefn Operator ostream& operator<< (ostream& @var{o}, const row& @var{r});
This writes the row to the given output stream, in the same format as
returned by @code{row::print()}.
@end deftypefn

@deftypefn Operator bool row::operator< (const row& @var{other});
@deftypefnx Operator bool row::operator> (const row& @var{other});
These functions perform a lexicographical comparison of the two rows.
They are necessary in order that rows may be put into certain containers.
@end deftypefn

@node Other row Functions, row static Functions, row Operators, The row Class
@subsection Other functions

@deftypefun int row::bells (void) const;
This returns the number of bells which the row contains.
@end deftypefun

@deftypefun void row::swap (row& @var{other});
This function swaps this row with @var{other} in an efficient manner.
@end deftypefun

@c Silly bit to get round a bug
@ifinfo
@deftypefun row& row::rounds (void);
This sets the row to rounds.
@end deftypefun
@end ifinfo
@iftex
@deftypefun row@& row::rounds (void);
This sets the row to rounds.
@end deftypefun
@end iftex

@deftypefun int row::isrounds (void) const;
This returns 1 if the row is rounds, and 0 otherwise.
@end deftypefun

@deftypefun int row::ispblh (void) const;
If the row is a lead head of Plain Bob, Grandsire or, more generally, of
the Plain Bob type method with any number of hunt bells, then this
function returns an integer indicating which lead head it is.
Otherwise, it returns 0.
@end deftypefun

@deftypefun {char*} row::print (char* @var{s}) const;
This prints the row to the string @var{s}. Note that @var{s} must be
long enough.
@end deftypefun

@deftypefun string row::print () const;
This prints the row to a string object.
@end deftypefun

@deftypefun row row::inverse (void) const;
This returns the inverse of a row, as explained above.
@end deftypefun

@deftypefun int row::sign (void) const;
This returns the sign or parity of a row:  1 for even, -1 for odd.
@end deftypefun

@deftypefun int row::order (void) const;
This returns the order of the row.
@end deftypefun

@deftypefun char* row::cycles (char* @var{result}) const;
This expresses the row as separate cycles. The string @var{result} will
afterwards contain a list of all the cycles in the row, separated by
commas; for example @code{row("21453678").cycles(s)} will return the
string @code{"12,345,6,7,8"}. Note that @var{result} must be long enough.
@end deftypefun

@deftypefun {template <> void} swap<row> (row& @var{a}, row& @var{b});
This specialised the @code{swap} function which is defined in the
standard library.  The result is that certain standard algorithms may 
become much more efficient.  Note that according to your namespace
setup, @code{swap} may need to be in namespace @code{std}; similarly,
@code{row} may or may not be in namespace @code{ringing}.  This is all
taken care of.
@end deftypefun

@node row static Functions,  , Other row Functions, The row Class
@subsection @code{static} functions

@deftypefun {static row} row::rounds (int @var{n});
This returns the row corresponding to rounds on @var{n} bells.
@end deftypefun

@deftypefun {static row} row::pblh (int @var{n}, int @var{h} = 1);
This returns the first lead head of Plain Bob (@var{h} = 1), Grandsire
(@var{h} = 2), or more generally the Plain Bob type method on @var{n}
bells with @var{h} hunt bells.
@end deftypefun

@node The change Class, The permute function, The row Class, Rows and Changes
@section The @code{change} class
@cindex @code{change} class

The @code{change} class stores a single change, i.e. a means of getting
from one row to another.

@menu
* change Derivation::           
* change Constructors::         
* change Operators::            
* Other change Functions::      
@end menu

@node change Derivation, change Constructors, The change Class, The change Class
@subsection Derivation

This class is not derived from any other classes.

@example
class change;
@end example

@node change Constructors, change Operators, change Derivation, The change Class
@subsection Constructors

@deftypefn Constructor {} change::change (void);
This constructs an empty change.
@end deftypefn

@deftypefn Constructor explicit change::change (int @var{n});
This constructs an empty change for @var{n} bells, which will initially
contain no swaps, i.e. all bells will remain in the same place.
@end deftypefn

@deftypefn Constructor {} change::change (const change& @var{c});
This is the copy constructor; it makes a new copy of @var{c}.
@end deftypefn

@deftypefn Constructor {} change::change (int @var{n}, char* @var{pn});
@deftypefnx Constructor {} change::change (int @var{n}, const string& @var{pn});
This constructs a change on @var{n} bells, with place notation as given
in @var{pn}. This should consist of a sequence of characters which signify
the places to be made, arranged in ascending order. If no places are to
be made, the string @code{"X"} should be used. Note that you
can miss out external places, unless no internal places are made at all.
@end deftypefn

@node change Operators, Other change Functions, change Constructors, The change Class
@subsection Operators

@deftypefn Operator change& change::operator= (const change& @var{c});
This assigns the value of one change to another.
@end deftypefn

@deftypefn Operator int change::operator== (const change& @var{c}) const;
@deftypefnx Operator int change::operator!= (const change& @var{c}) const;
These compare two changes.  Note that to be equal, the changes must be
defined on the same number of bells; for example, @samp{"12"} on 4
bells is different from @samp{"12"} on 6 bells.
@end deftypefn

@deftypefn Operator bell& operator*= (bell& @var{b}, const change& @var{c});
@deftypefnx Operator bell operator* (bell @var{b}, const change& @var{c});
These return the effect of applying the change @var{c} to the bell
@var{b}. For example, @code{3 * "34" == 4}. This is useful in tracing
the path of one particular bell through a series of changes.
@end deftypefn

@deftypefn Operator ostream& operator<< (ostream& @var{o}, const change& @var{c});
This writes the place notation for the change @var{c} to the given
output stream.
@end deftypefn

@node Other change Functions,  , change Operators, The change Class
@subsection Other functions

@deftypefun void change::swap (change& @var{c});
This function swaps this change with the change given by @var{c} in an
efficient manner.
@end deftypefun

@deftypefun int change::bells (void) const;
This returns the number of bells on which the change is defined.
@end deftypefun

@deftypefun int change::sign (void) const;
This returns the sign of the change: -1 if an odd number of pairs are
swapped, +1 if an even number of pairs are swapped.
@end deftypefun

@deftypefun int change::findswap (bell @var{i}) const;
Returns 1 if the change swaps bells @var{i} and @var{i+1}, and 0
otherwise.
@end deftypefun

@deftypefun int change::findplace (bell @var{i}) const;
Returns 1 if the change doesn't move the bell in the @var{i}th place
(i.e. if @var{i}ths place is made), and 0 otherwise.
@end deftypefun

@deftypefun int change::swappair (int @var{i});
If the change doesn't currently swap bells @var{i} and @var{i+1}, then
this will add that swap.  If those bells are swapped, this will remove
the swap.  If the bells @var{i-1} and @var{i}, or @var{i+1} and
@var{i+2}, are currently swapped, those swaps are removed.

This function makes it possible for the user to edit changes in such a
way that they will always end up in a sensible state.
@end deftypefun

@deftypefun change change::reverse (void) const;
This returns the reverse of a change; that is, the change is flipped
over so that on 8 bells for example, 2nds place becomes 7ths place and
so on.
@end deftypefun

@deftypefun int change::internal (void) const;
This returns 1 if the change contains internal places, and 0 otherwise.
@end deftypefun

@deftypefun char* change::print (char* @var{s}) const;
This function prints the place notation for the change to the string
@var{s}, which should be long enough to contain it.
@end deftypefun

@deftypefun string change::print (void) const;
This function prints the place notation for the change to a string.
@end deftypefun

@deftypefun {template <> void} swap<change> (change& @var{a}, change& @var{b});
This specialised the @code{swap} function which is defined in the
standard library.  The result is that certain standard algorithms may 
become much more efficient.  Note that according to your namespace
setup, @code{swap} may need to be in namespace @code{std}; similarly,
@code{change} may or may not be in namespace @code{ringing}.  This is all
taken care of.
@end deftypefun

@node The permute function, The row_block class, The change Class, Rows and Changes
@section The @code{permute} function
@cindex @code{permute} function

The @code{permute} function is a utility function which makes it possible to
use some of the standard algorithms contained in the C++ library.  There are 
two forms of the function:  the first takes an unsigned integer as
its argument, and the second takes a reference to a row.  In either case,
a function object (of type @code{permuter} or @code{row_permuter}) is returned,
which can be used with standard algorithms.

@deftypefun {inline permuter} permute(unsigned @var{n});
This global function returns a function object of type @code{permuter}, which
contains a row initialised to rounds on @var{n} bells.  When the function
object is called with an argument of either a row or change, its internal
row is multiplied by that row or change and then returned.
@end deftypefun

@deftypefun {inline row_permuter} permute(row& @var{r});
This global function creates a @code{row_permuter} function object, which
contains a reference to the row @var{r}.  When the function object is called
with a row or change as an argument, the row @var{r} will be multiplied
by that row or change.
@end deftypefun

@deftypefn Operator {const row&} permuter::operator() (const row& @var{r});
@deftypefnx Operator {const row&} permuter::operator() (const change& @var{c});
These operators multiply the permutation contained in the @code{permuter}
object by the given row or change, and return the new permutation.
@end deftypefn

@deftypefn Operator {const row&} row_permuter::operator() (const row& @var{r});
@deftypefnx Operator {const row&} row_permuter::operator() (const change& @var{c});
These operators multiply the row which the @code{row_permuter} object refers
to by the given row or change.  A reference to that row is returned.
@end deftypefn

@node The row_block class, Other functions in row.h, The permute function, Rows and Changes
@section The @code{row_block} class
@cindex @code{row_block} class

The @code{row_block} class is an array of rows which has associated with
it a reference to an array of changes, and can recalculate itself from
those changes.  For example, suppose that the variable @code{c} of type
@code{vector<change>} holds one lead of a method; then it is possible to
define a variable of type @code{row_class} which, once it is told what
the lead head is, will calculate the rows for one lead of the method.

Note that the @code{row_block} object does not store its own copy of the
@code{vector<change>} object from which it is calculated.  This means
that the changes may be altered and the resulting rows recalculated
easily; it also means that the changes must not be deallocated while the
@code{row_block} object is in existence.

@menu
* row_block Derivation::        
* row_block Constructors::      
* Other row_block Functions::   
@end menu

@node row_block Derivation, row_block Constructors, The row_block class, The row_block class
@subsection Derivation

The @code{row_block} class is derived from @code{vector<row>}.

@example
class row_block : public vector<row>;
@end example

@node row_block Constructors, Other row_block Functions, row_block Derivation, The row_block class
@subsection Constructors

@deftypefn Constructor {} row_block::row_block (const vector<change>& @var{c});
This creates a block of rows using the changes in @var{c}, starting
from rounds.
@end deftypefn

@deftypefn Constructor {} row_block::row_block (const vector<change>&
@var{c}, const row& @var{r});
This creates a block of rows using the changes in @var{c}, starting from
the row given in @var{r}.
@end deftypefn

@node  Other row_block Functions,  , row_block Constructors, The row_block class
@subsection Other functions

@ifinfo
@deftypefun row& row_block::set_start (const row& @var{r});
This sets the first row to @var{r}.  Note that this function does @emph{not}
recalculate the rest of the rows afterwards; you must do this by calling
@code{recalculate()}.
@end deftypefun
@end ifinfo
@iftex
@deftypefun row@& row_block::set_start (const row& @var{r});
This sets the first row to @var{r}.  Note that this function does @emph{not}
recalculate the rest of the rows afterwards; you must do this by calling
@code{recalculate()}.
@end deftypefun
@end iftex

@ifinfo
@deftypefun row_block& row_block::recalculate (int @var{start} = 0);
This recalculates all the rows in the array, starting from the element
numbered @var{start}; if this is not specified, all the rows are recalculated.
If, for example, you know that the @code{changes} object which the row block
is based on has been changes halfway through, you don't have to recalculate
all the rows, just the ones after that point.
@end deftypefun
@end ifinfo
@iftex
@deftypefun row_block@& row_block::recalculate (int @var{start} = 0);
This recalculates all the rows in the array, starting from the element
numbered @var{start}; if this is not specified, all the rows are recalculated.
If, for example, you know that the @code{changes} object which the row block
is based on has been changes halfway through, you don't have to recalculate
all the rows, just the ones after that point.
@end deftypefun
@end iftex

@ifinfo
@deftypefun {const vector<change>&} row_block::get_changes (void) const;
This returns the @code{vector<change>} object on which the row block is based.
@end deftypefun
@end ifinfo
@iftex
@deftypefun {const vector<change>@&} row_block::get_changes (void) const;
This returns the @code{vector<change>} object on which the row block is based.
@end deftypefun
@end iftex

@node Other functions in row.h,  , The row_block class, Rows and Changes
@section Other functions in @file{row.h}

@deftypefun {template<OutputIterator, ForwardIterator> void} interpret_pn (int @var{bells}, ForwardIterator @var{start}, ForwardIterator @var{finish}, OutputIterator @var{out});
This template function is for expanding place notation into changes.  The
arguments are as follows: @var{bells} is the number of bells; @var{start} and
@var{finish} should be forward iterators with value type @code{char}, and
indicate a string of characters containing the place notation; and @var{out}
is an output iterator of value type @code{change}, to which the changes
will be written.

The syntax of the place notation is as follows: place notation consists of 
a sequence of blocks, which are delimited by commas.  Each block is a 
sequence of changes, with @samp{X} or @samp{-} meaning a cross change.
Changes other than cross changes are separated by full stops.
A block may optionally be preceded by an ampersand @samp{&}, which means
that the entire block, except the last change, is repeated backwards.  All
other characters are ignored.

For examples of this function in use, look at one of the @code{method} 
constructors in @file{ringing/method.h} or in the example code.
@end deftypefun

@node Methods, Method Libraries, Rows and Changes, Top
@chapter Method classes
@cindex method

The Ringing Class Library provides many useful functions for dealing with
methods, finding information about them and classifying them.

A @dfn{method} consists of one block of changes which is repeated over
and over again; this is called a @dfn{lead}.  If, at the end of one
lead, every bell is in a different position, then the method is called a
@dfn{principle} and the leads are called @dfn{divisions}.  Any bells is
a method which end up in the same place at the end of a lead are called
@dfn{hunt bells}.

The Ringing Class Library defines an object @code{method} which is
simply a block of changes (it is derived from @code{vector<change>}) and
which provides a large range of member functions.  Many of these are
used for finding out things about the method, such as the number of
leads in the plain course, the type of method, the full name and so on.

@menu
* The method Class::            
@end menu

@node The method Class,  , Methods, Methods
@section The @code{method} class
@cindex @code{method} class

The @code{method} class represents a method by storing the changes which
make up one lead of the method.  This class is declared in
@file{ringing/method.h}.

A method may have a name, which is a string variable.  This name is the
@dfn{base name} of the method, that is, it is the name without any extra
bits such as `Surprise' or `Triples'.  For example, the base name of
Plain Bob Major is simply `Plain'.  The parts of the name other than the
base can be worked out by the Ringing Class Library.

@menu
* method Derivation::           
* method Constructors::         
* Other method Functions::      
* method static Functions::     
* method static Variables::     
@end menu

@node method Derivation, method Constructors, The method Class, The method Class
@subsection Derivation

The @code{method} class is derived from @code{vector<change>}:
@example
class method : public vector<change>
@end example

@node method Constructors, Other method Functions, method Derivation, The method Class
@subsection Constructors

@deftypefn Constructor {} method::method (int @var{length}, int @var{bells}, char* @var{name} = "Untitled");
This constructor creates an empty method on @var{bells} bells, with
@var{length} changes in the lead, and with name @var{name}.  All the
bells stay in the same place for the entire lead.
@end deftypefn

@deftypefn Constructor {} method::method (const char* @var{pn}, int @var{bells}, char* @var{name} = "Untitled");
@deftypefnx Constructor {} method::method (const string& @var{pn}, int @var{bells}, const string& @var{name} = "Untitled");
This constructor creates a method on @var{bells} bells from the given
place notation, which should be an entire lead.  The method is given the name 
@var{name}.  For information on how to specify the place notation, see the
discussion of @code{interpret_pn} in @ref{Other functions in row.h}.
@end deftypefn

@deftypefn Constructor {} method::method (const method& @var{m});
This is the copy constructor.
@end deftypefn

@node Other method Functions, method static Functions, method Constructors, The method Class
@subsection Other functions

@deftypefun {const char*} method::name (void);
This returns the base name of the method.
@end deftypefun

@deftypefun void method::name (const char* @var{name});
@deftypefunx void method::name (const string& @var{name});
This sets the base name of the method to @var{name}.
@end deftypefun

@deftypefun int method::bells (void);
This returns the number of bells on which the method is defined.
@end deftypefun

@deftypefun int method::length (void);
This returns the number of changes in a lead of the method.
@end deftypefun

@deftypefun void method::push_back (const change& @var{c});
@deftypefunx void method::push_back (const string& @var{s});
These utility functions add a change to the end of the method.  In
the first case, @var{c} is the change to be added; in the second case,
@var{s} is place notation for the change to be added.
@end deftypefun

@deftypefun row method::lh (void);
This returns the first lead head of the method.
@end deftypefun

@deftypefun int method::issym (void);
This returns 1 if the method is symmetrical about the half lead (and has
an even number of changes in the lead), or 0 otherwise.
@end deftypefun

@deftypefun int method::isdouble (void);
This returns 1 if the method is double, or 0 otherwise.  Note that double
does not imply symmetrical.
@end deftypefun

@deftypefun int method::isregular (void);
This returns 1 if the method is regular (that is, has Plain Bob lead 
heads), or 0 otherwise.
@end deftypefun

@deftypefun int method::huntbells (void);
This returns the number of hunt bells in the method.
@end deftypefun

@deftypefun int method::leads (void);
This returns the number of leads in the plain course of the method.
@end deftypefun

@deftypefun char* method::lhcode (void);
This returns the standard code for the lead end and lead head of the
method.  The result is stored in a static internal buffer.
@end deftypefun

@deftypefun int method::issym (bell @var{b});
This returns 1 if the path of bell @var{b} in a lead of the method is
symmetrical about the half lead, or 0 otherwise.
@end deftypefun

@deftypefun int method::isplain (bell @var{b} = 0);
This returns 1 if bell @var{b} plain hunts for the whole lead of the
method, or 0 otherwise.
@end deftypefun

@deftypefun int method::hasdodges (bell @var{b});
This returns 1 if bell @var{b} dodges during the lead, or 0 otherwise.
@end deftypefun

@deftypefun int method::hasplaces (bell @var{b});
This returns 1 if bell @var{b} makes any internal places during the lead,
or 0 otherwise.
@end deftypefun

@deftypefun int method::methclass (void);
This function returns an integer which depends on the class of the
method.  The following values are defined:
@example
enum method::m_class @{
  M_UNKNOWN, M_PRINCIPLE, M_BOB, M_PLACE, M_TREBLE_BOB, M_SURPRISE, 
  M_DELIGHT, M_TREBLE_PLACE, M_ALLIANCE, M_HYBRID, M_SLOW_COURSE,
  M_MASK = 0x0f,
  M_DOUBLE = 0x40,
  M_LITTLE = 0x80
@};
@end example
The @code{M_DOUBLE} and @code{M_LITTLE} bits are flags which will be either
set or cleared accordingly.
@end deftypefun

@deftypefun char* method::fullname (char* @var{buffer});
This function places the full name of the method in @var{buffer}, which
should be long enough to receive it, and returns a pointer to it.  The
full name consists of:
@itemize @bullet
@item
the base name of the method;
@item
the word ``Little'', if appropriate;
@item
the class of the method, or none if it is a principle;
@item
the stage (number of bells) of the method.
@end itemize
@end deftypefun

@node method static Functions, method static Variables, Other method Functions, The method Class
@subsection @code{static} functions

@deftypefun {static const char*} method::stagename (int @var{bells});
This function returns a pointer to a string describing the stage of 
@var{bells} bells:  thus @code{"Minimus"}, @code{"Doubles"}, and so on.
For stages above Sixteen, the number is given in digits.
@end deftypefun

@deftypefun {static const char*} method::classname (int @var{class});
This function returns a pointer to a string describing the method class
given in @var{class}, which should be as indicated in the explanation
of @code{method::methclass()} above.
@end deftypefun

@node method static Variables,  , method static Functions, The method Class
@subsection @code{static} variables

@deftypevar {static const char*} method::txt_double;
This points to the string @code{"Double"}.
@end deftypevar

@deftypevar {static const char*} method::txt_little;
This points to the string @code{"Little"}.
@end deftypevar

@node Method Libraries, Proof, Methods, Top
@chapter Method Libraries and control
@cindex library
@cindex method library
@cindex @code{library} class
@cindex @code{cclib} class
@cindex @code{mslib} class

The @code{library} class and it's associated classes and derived classes
allow loading of method libraries. Currently, two method libraries are
supported, these are:

@subsection MicroSiril Libraries

Header file @code{mslib.h}. These were originally written to support the MicroSiril software tool. Regularly updated files are put on the internet, and may be downloaded from:

@example
http://sunsite.doc.ic.ac.uk/recreation/change-ringers/ringing-programs/microsiril/method-libraries/
@end example

@subsection Central Council Libraries

Header file @code{cclib.h}. These are a relatively new set of libraries, generated by the Methods Committee. They can be downloaded from:

@example
http://www.methods.clara.net/method-collections/zip-files/index.htm
@end example

@menu
* General Use::                 
* The Library Classes::         
* Deriving Library Classes::    
@end menu

@node General Use, The Library Classes, Method Libraries, Method Libraries
@section General Use

An introduction into how to use the classes should help the user to understand
the inner workings more easily.

@menu
* Initialisation::              
* Opening Files::               
* Loading Methods::             
* Saving Methods::              
@end menu

@node Initialisation, Opening Files, General Use, General Use
@subsection Initialisation

The first thing to do is to include the libraries that you wish to use. In
our case, we will include both the support libraries:

@example
#include <ringing/mslib.h>
#include <ringing/cclib.h>
@end example

Now we have to register the type of libraries that we are using to the library
class. This is done by a function call for each library; these can be placed anywhere before the library is used. As they are calls to static functions, once they are registered, they will remain so until the program finishes. For mslib and cclib to be included use the following function calls:

@example
mslib::register();
cclib::register();
@end example

This declares our libraries. If we only wish to load one type of library, then
we only use one call, otherwise we add more as required.

@node Opening Files, Loading Methods, Initialisation, General Use
@subsection Opening Files

Once we are ready to use the method library, the first thing we do is to open
a file:

@example
library l(filename);
@end example

The variable @var{filename} should be of type @code{char*}, (the function
declaration states @code{const char*}), and contain a string of characters
terminated by @code{\0}. The string should be the location of the file.

What the library class now does is to go through each type of library that was
declared to see if it can open and read the file. If a derived library cannot
read the format of the file, library moves onto the next one.

To check that a valid (it exists, and there is a library that can read it) file has been created use the good function, thus:

@example
if (l.good())
@{
// we are ok to proceed
@}
else
@{
// we haven't got a good library.
@}
@end example

Now you have a library loaded, you can use it to load multiple methods from that file.

@node  Loading Methods, Saving Methods, Opening Files, General Use
@subsection Loading Methods

Now we have a file loaded into a library, you will want to get a method definition from it. To do this use the following:

@example
method m = l.load(methname);
@end example

Again, methname should be a pointer to a string of characters. If the load function is successful (method found in the file), all will be happy and continue nicely. If not, then one of two things will happen.

If exceptions are enabled, an exception will be thrown which you should catch, otherwise the program will probably exit. Catch it like this:

@example
try 
@{
  method m = l.load(methname);  
@}
catch (exception &e)
@{
  cerr << "Error: " << e.what() << endl;
  // Do some error handling here.
@}
@end example

If exceptions are not enabled, then you will need to check the method name. If it is equal to "Not Found", this means that the method wasn't found. Otherwise it should contain the name of your method.

Note: It is worth examining the contents of the method libraries to note the
different format of the method names. Both mslib and cclib are case-insensitive
when specifying methname.

@node Saving Methods,  , Loading Methods, General Use
@subsection Saving Methods

Due to the human read/write style formats for the method library files, there
are currently no available save commands. At some point in the future a better
machine writeable format may be developed that will enable the saving of the
methods.

@node The Library Classes, Deriving Library Classes, General Use, Method Libraries
@section The @code{Library} classes

The library classes form the base of the library loading system. @code{Library.h} declares 4 classes, these are:

@deftypefn @code{class libtype}
A type of library, the base for newlib
@end deftypefn
@deftypefn @code{template <class mylibrary> class newlib : public libtype}
Each library must declare one of these. It's the handler by which the derived library class can be accessed.
@end deftypefn
@deftypefn @code{class library_base}
This is the base class for all method libraries.
@end deftypefn
@deftypefn @code{class library}
This is the interface class for accessing method libraries.
@end deftypefn

@menu
* The libtype class::           
* The newlib class::            
* The library_base class::      
* The library class::           
@end menu

@node The libtype class, The newlib class, The Library Classes, The Library Classes
@subsection The @code{libtype} class

This class is a base class for the method library type. It is used with the method libraries but does not need to be accessed externally.

It is a friend of the library class so that it's only function can be accessed.

It contains just one function definition that is protected:

@deftypefn @code{virtual library_base *open(const char *n) const}
This function is the prototype that the @code{library} class will use to attempt to open a library file. For this class it simply returns null.
@end deftypefn

@node The newlib class, The library_base class, The libtype class, The Library Classes
@subsection The @code{newlib} class

Each new method library must declare one of these. The user must then register it with the library class to allow the method library to be used. The library class calls the open method to see if the method library is able to load the library:

@example
  library_base *open(const char *name) const @{
    if(mylibrary::canread(name)) @{
      return new mylibrary(name);
    @} else
      return NULL;
  @}
@end example

The @code{mylibrary::canread} function is a static function that must be present in the derived class. The open function uses this to determine if the library can read the file that is given to it.

@node The library_base class, The library class, The newlib class, The Library Classes
@subsection The @code{library_base} class

The @code{library_base} class is the base class for any new method library classes that are developed.

The rest of this section is still to be written.

@node The library class,  , The library_base class, The Library Classes
@subsection The @code{library} class

The @code{library} class is the main interface to the individual method libraries. It provides a interface that will automatically determine which library to use and deal with the creation and deletion of that library as necessary.

The rest of this section is still to be written.

@node Deriving Library Classes,  , The Library Classes, Method Libraries
@section Deriving Library Classes

This section is still to be witten

@node Proof, Musical Analysis, Method Libraries, Top
@chapter Method and Touch Proving
@cindex proving rows
@cindex @code{proof} class

The proof class provides a simple way of checking that a block of rows
are true.  It provides functions for finding out where a particular block
has failed.  Additionally, it will can check blocks that are more than
one extent long.

It is a template class, defined as @code{template <class RowIterator>
class proof;}.  You can therefore decide on your own method of
generating rows, as long as you can provide an iterator (see the
@acronym{STL}) for it.

It will check ALL rows given; therefore, if rounds are at the start and
end, then one of them should be removed before passing to the object.

The proof class only stores the results: it does not make a copy of the
actual rows.  However, pointers to false rows will be stored, so don't
destroy your rows before getting all the proof results.  This may be
changed in a later release.

@menu
* proof Derivation::            
* proof Constructors::          
* proof Functions::             
* proof Operators::             
* proof Output::                
* Falseness Storage::           
* How Proof Works::             
@end menu

@node proof Derivation, proof Constructors, Proof, Proof
@subsection Derivation

This class is not derived from any other classes.

@example
template <class RowIterator> class proof;
@end example

@node proof Constructors, proof Functions, proof Derivation, Proof
@subsection Constructors

@deftypefn Constructor {} proof::proof (void);
Default Constructor. Sets trueness to false. Use the prove function to provide the rows to prove.
@end deftypefn

@deftypefn Constructor {} proof::proof (RowIterator @var{first}, RowIterator @var{last});
This checks for repeated rows from first to last. Expects up to 1 extent only. Result is stored in class for later retrieval.
@end deftypefn

@deftypefn Constructor {} proof::proof (RowIterator @var{first}, RowIterator @var{last}, const int @var{max}, proof::hash_function @var{f});
This checks for repeated rows from first to last. Expects up to @var{max} extents. Result is stored in class for later retrieval.
@end deftypefn

@node proof Functions, proof Operators, proof Constructors, Proof
@subsection Functions

@deftypefn Function bool proof::prove (RowIterator @var{first}, RowIterator @var{last});
This checks for repeated rows from first to last. Expects up to 1 extent only. Full result is stored in class for later retrieval, but trueness of rows is returned. This function will erase any falseness details stored in the class.
@end deftypefn

@deftypefn Function bool proof::prove (RowIterator @var{first}, RowIterator @var{last}, const int @var{max}, proof::hash_function @var{f});
This checks for repeated rows from first to last. Expects up to @var{max} extents. Full result is stored in class for later retrieval, but trueness of rows is returned. This function will erase any falseness details stored in the class.
@end deftypefn

@ifinfo
@deftypefn Function {const failinfo&} proof::failed (void) const;
This function simply returns the data detailing where the touch has failed. (*note Falseness Storage::).
@end deftypefn
@end ifinfo
@iftex
@deftypefn Function {const failinfo@&} proof::failed (void) const;
This function simply returns the data detailing where the touch has failed.
@end deftypefn
@end iftex

@node proof Operators, proof Output, proof Functions, Proof
@subsection Operators

@deftypefn Operator operator proof::int (void) const;
This returns true (or 1) if the touch is true.
@end deftypefn

@deftypefn Operator int proof::operator! (void) const;
This returns true (or 1) if the touch is not true.
@end deftypefn

@node proof Output, Falseness Storage, proof Operators, Proof
@subsection Output

Output of the proof class is achieved in one of two ways. Either, the functions proof::int and failed() are used, or an overloaded ostream operator for a fixed format.

@ifinfo
@deftypefn Operator {template <class RowIterator> ostream&} operator<< (ostream& @var{o}, const proof<RowIterator>& @var{p});
Outputs to the ostream, @var{o}, if @var{p} is true or false in a predefined format. If p is false, then additional information regarding where is also output.
@end deftypefn
@end ifinfo
@iftex
@deftypefn Operator {template <class RowIterator> ostream@&} operator<< (ostream@& @var{o}, const proof<RowIterator>@& @var{p});
Outputs to the ostream, @var{o}, if @var{p} is true or false in a predefined format. If p is false, then additional information regarding where is also output.
@end deftypefn
@end iftex

@node Falseness Storage, How Proof Works, proof Output, Proof
@subsection How falseness is stored
@cindex falseness storage

When the proof class finds two or more rows that are the same, it stores the details in a private variable, @var{where}. This can be retrieved by the function @code{failed}. The variable is defined as:

@example
typedef list<linedetail> proof::failinfo;
failinfo @var{where};
@end example

linedetail is a struct defined as:

@example
struct linedetail @{
 row _row;
 list<int> _lines;
@};
@end example

When a row is repeated more than once, a new linedetail item is added to @var{where}. In the linedetail data is stored a pointer, @var{_row}, to the first of the matching rows, and the row numbers are put into @var{_lines}. If the first row given to the class matches the 11th row, then 0 and 10 will be placed into @var{_lines}. If there are three or more rows that all match, then the relevant numbers will be placed into the @var{_lines} list without repeating any.

@node How Proof Works,  , Falseness Storage, Proof
@subsection How it works
@cindex How proof works

There are two ways that the class can prove blocks of rows depending on if the number of rows is less or greater than an extent. In both methods, the procedures are carried through to the end to allow the user to see where the block of rows is false in all places, not just the first.

@subsection Single Extent

If the single extent version of the function @code{proof::prove} is called, then we follow this procedure.

Here we look at the first row and compare it to the rest. Then we proceed to the second and compare that to the rest (starting from the third, and going to the end). We then continue this until we have completed all the rows. If two rows match the details are stored and the trueness is set to false.

@subsection Multiple Extents

If the multiple extent version of the function @code{proof::prove} is called, then we follow this procedure.

Now we proceed through the list just once. Each row is put into a multimap, if at any time the amount of rows in this map exceed the maximum number of extents then the details are added into the failed information and the trueness is set to false.

@node Musical Analysis, Method classification, Proof, Top
@chapter Analysis of Music
@cindex Music Analysis
@cindex music class

The music class provides analysis for music within a set of rows. Like the proof class, it is also a template class defined as @code{template <class RowIterator> class music;}. Hence, you can define your own format for the set of rows as long as you can provide an iterator for it.

The music class processes each row just once, it does not store any rows. It assumes that the first row given is a handstroke row. The class should be able to handle any number of bells. If an odd number of bells is given, e.g. 5, then a tenor is assumed in looking for items like queens, e.g. 13524 essentially becomes 135246.

Each time the analysis function is called, the results stored in the class are reset to zero, and then incremented based on the rows given.

@menu
* music Derivation::            
* music Constructors::          
* music Functions::             
* music Operators::             
@end menu

@node music Derivation, music Constructors, Musical Analysis, Musical Analysis
@subsection Derivation

This class in not derived from any other classes.

@example
class music;
@end example

@node music Constructors, music Functions, music Derivation, Musical Analysis
@subsection Constructors

@deftypefn Constructor {} music::music (void);
Default constructor. Resets all the music variables to zero.
@end deftypefn

@deftypefn Constructor {template<class RowIterator>} music::music (RowIterator @var{first}, RowIterator @var{last}, bool @var{backstroke} = false);
This constructor takes the rows and passes them to @code{music::change_rows} which resets the music variables and analyses all the rows. First and last should be an iterator to a container that stores rows.

The backstroke operator allows the user to specify if the first row is a backstroke row (@var{backstroke} = true) or a handstroke row (default, @var{backstroke} = false).
@end deftypefn

@node music Functions, music Operators, music Constructors, Musical Analysis
@subsection Functions

@deftypefn Function {template<class RowIterator> inline void} music::change_rows (RowIterator @var{first}, RowIterator @var{last}, bool @var{backstroke} = false);
This function resets all the music variables and the analyses the rows. First and last should be an iterator to a container that stores rows.

The backstroke operator allows the user to specify if the first row is a backstroke row (@var{backstroke} = true) or a handstroke row (default, @var{backstroke} = false).
@end deftypefn

The following functions all return values depending on the last block of rows analysed.

@deftypefn Function bool music::queens (void) const;
This function returns true if queens was present.
@end deftypefn

@deftypefn Function bool music::titums (void) const;
This function returns true if titums was present.
@end deftypefn

@deftypefn Function bool music::kings (void) const;
This function returns true if kings was present.
@end deftypefn

@deftypefn Function bool music::reverse_rounds (void) const;
This function returns true if reverse_rounds was present.
@end deftypefn

@deftypefn Function int music::t_tminus1_at_back (void) const;
This function returns the number of 65s, 87s, 09s etc present at backstroke
@end deftypefn

@deftypefn Function int music::tminus2_t_at_the_back_hs (void) const;
This function returns the number of 46s, 68s, etc at the end of the change present at handstroke. Note, this also includes the number of 246s, 468s etc.
@end deftypefn

@deftypefn Function int music::tminus4_tminus2_t_at_the_back_hs (void) const;
This function returns the number of 246s, 468s, etc at the end of the change present at handstroke.
@end deftypefn

@deftypefn Function int music::tminus2_t_at_the_back_bs (void) const;
This function returns the number of 46s, 68s, etc at the end of the change present at backstroke. Note, this also includes the number of 246s, 468s etc.
@end deftypefn

@deftypefn Function int music::tminus4_tminus2_t_at_the_back_bs (void) const;
This function returns the number of 246s, 468s, etc at the end of the change present at backstroke.
@end deftypefn

@deftypefn Function int music::rollup_3 (void) const;
This function returns the number of three bell rollups present on the back, this does not include other numbers of rollups.
@end deftypefn

@deftypefn Function int music::rollup_4 (void) const;
This function returns the number of four bell rollups present on the back, this does not include other numbers of rollups.
@end deftypefn

@deftypefn Function int music::reverse_rollup_3 (void) const;
This functoin returns the number of reverse three bell rollups present on the front (e.g. 876, 654), this does not include other number of rollups.
@end deftypefn

@deftypefn Function int music::reverse_rollup_4 (void) const;
This functoin returns the number of reverse four bell rollups present on the front (e.g. 8765, 6543), this does not include other number of rollups.
@end deftypefn

@node music Operators,  , music Functions, Musical Analysis
@subsection Operators

@ifinfo
@deftypefn Operator {ostream&} operator<< (ostream& @var{o}, const music& @var{m});
Outputs to the ostream a string containing the following details:

@example
qktr,1,2,3,4,5,6,7,8,9
@end example

Letter are displayed only when the following music in the touch, otherwise there is just a space:
@example
q = queens
k = kings
t = titums
r = reverse rounds
@end example

Otherwise numbers provide the following information
@example
1 = Number of 3 bell rollups in the touch (i.e.  678 on the back)
2 = Number of 4 bell rollups in the touch (i.e. 5678 on the back)
3 = Number of reverse 3 bell rollups off the front (i.e. 654 or 876)
4 = Number of reverse 4 bell rollups off the front (i.e. 6543 or 8765)
5 = Number of 46s or 68s etc at handstroke (note: this also adds in total for item 7).
6 = Number of 46s or 68s etc at backstroke (note: this also adds in total for item 8).
7 = Number of 246s or 468s etc at handstroke
8 = Number of 246s or 468s etc at backstroke
9 = Number of 65s or 87s at backstroke (will be zero for odd nos of bells)
@end example
@end deftypefn
@end ifinfo
@iftex
@deftypefn Operator friend ostream@& operator<< <>(ostream@& @var{o}, const music<RowIterator>@& @var{m});
Outputs to the ostream a string containing the following details:

@example
qktr,1,2,3,4,5,6,7,8,9
@end example

Letter are displayed only when the following music in the touch, otherwise there is just a space:
@example
q = queens
k = kings
t = titums
r = reverse rounds
@end example

Otherwise numbers provide the following information
@table @asis
@item 1
Number of 3 bell rollups in the touch (i.e.  678 on the back)

@item 2
Number of 4 bell rollups in the touch (i.e. 5678 on the back)

@item 3
Number of reverse 3 bell rollups off the front (i.e. 654 or 876)

@item 4
Number of reverse 4 bell rollups off the front (i.e. 6543 or 8765)

@item 5
Number of 46s or 68s etc at handstroke (note: this also adds in total
for item 7).

@item 6
Number of 46s or 68s etc at backstroke (note: this also adds in total
for item 8).  

@item 7
Number of 246s or 468s etc at handstroke 

@item 8
Number of 246s or 468s etc at backstroke 9 = Number of 65s or 87s at backstroke
(will be zero for odd nos of bells)
@end table
@end deftypefn
@end iftex

@node Method classification, Producing printed output, Musical Analysis, Top
@chapter Classification of methods

Methods are classified according to section E, subsections B and C, of
the Central Council's Decisions.

@node Producing printed output, Copying this manual, Method classification, Top
@chapter Producing printed output
@cindex printing

The Ringing Class Library provides a flexible mechanism for producing
printed output of rows, methods and lines.  The way this mechanism is
designed means that the low-level details of printing are hidden from
the programmer.  Currently the classes in the library only support
output in PostScript format, but the modularity of the printing system
makes it easy to extend the library to provide other output formats.

Printing is provided in two classes:  the @code{printpage} class and the
@code{printrow} class.  The first of these deals with placing text and
other objects directly on the page; the second allows for formatted
output of rows and lines.  These classes are both polymorphic classes,
which are specialised by subclasses to allow for different output
formats.

@menu
* The dimension class::         
* The text_style class::        
* The printpage class::         
* The printrow class::          
* Printing in PostScript::      
@end menu

@node The dimension class, The text_style class, Producing printed output, Producing printed output
@section The @code{dimension} class

The @code{dimension} class is used extensively by the printing classes
to specify physical dimensions on the page.  The class has three public
data members and one public enumerated type:

@example
class dimension @{
public:
  enum units @{
    points, inches, cm, mm
  @};

  int n, d;
  units u;
@}
@end example

The integers @code{n} and @code{d} hold the numerator and denominator
respectively of the dimension.  The member @code{u} defines which units
the dimension is given in.  For example, a @code{dimension} object
representing three quarters of an inch would have @code{n} equal to 3,
@code{d} equal to 4, and @code{u} equal to @code{dimension::inches}.

The @code{dimension} class has several member functions.

@deftypefn Constructor {} dimension::dimension (void);
This constructs a dimension equal to 0.
@end deftypefn

@deftypefn Constructor {} dimension::dimension (int @var{i});
This constructs a dimension equal to @var{i} points.
@end deftypefn

@deftypefn Constructor {} dimension::dimension (int @var{i}, int @var{j}, dimension::units @var{u});
This constructs a dimension equal to the fraction @var{i}/@var{j} in
units @var{u}.
@end deftypefn

@deftypefn Operator dimension& dimension::operator*= (int @var{i})
@deftypefnx Operator dimension dimension::operator* (int @var{i})
These operators multiply the dimension by the integer @var{i}.
@end deftypefn

@deftypefn Operator bool dimension::operator== (int @var{i});
@deftypefnx Operator bool dimension::operator!= (int @var{i});
These operators are only useful for comparing a dimension to 0.
@end deftypefn

@deftypefun void dimension::reduce (void);
This function reduces the fraction @code{n}/@code{d} to lowest terms.
@end deftypefun

@deftypefun float dimension::in_points (void);
This returns a floating point numbers representing the dimension in
points.
@end deftypefun

@deftypefun void dimension::read (const string& @var{s});
@deftypefunx void dimension::read (const char* @var{s});
These functions read a dimension from a string.  The string should contain
following parts:
@itemize @bullet
@item An optional minus sign;

@item a number, in either decimal format or as a fraction;

@item the units.
@end itemize

For example, the following strings would all be recognised: @samp{0.4 cm};
@samp{1 1/2"}, @samp{56 pt}.  The allowed unit names are @samp{pt}, 
@samp{points}, @samp{point}, @samp{in}, @samp{inch}, @samp{inches},
@samp{"}, @samp{cm}, @samp{mm}.
@end deftypefun

@deftypefun string& dimension::write (string& @var{s});
This function writes the dimension to the string @var{s}.
@end deftypefun

@node The text_style class, The printpage class, The dimension class, Producing printed output
@section The @code{text_style} class

The @code{text_style} class is a structure which represents a text style.
At the moment, this means that it contains a font name and a size.  It
also defines an enumerated type which may be used to describe text
alignment.

@example
struct text_style @{
  string font;
  int size;
  enum alignment @{ left, right, centre @};
@};
@end example

@node The printpage class, The printrow class, The text_style class, Producing printed output
@section The @code{printpage} class

The @code{printpage} class takes control of producing printed output on
a page.  To start printing, an object of some subclass of
@code{printpage} is created, which will handle all further printing.
For example, to print to a PostScript stream or file, an object of class
@code{printpage_ps} would be created.  Once the @code{printpage} class
has been created, it can be used to place text directly on the page.  It
can also be used to create @code{printrow} objects for printing rows and
lines.

Note that positions on the page are always measured from the bottom left 
corner.

The @code{printpage} class is a pure virtual class:  the only way to create
one is by constructing an object of a derived class.

@deftypefun void printpage::new_page (void);
This tells the @code{printpage} object to finish printing the current
page and start a new page.  
@end deftypefun

@deftypefun {virtual void} printpage::text (const string @var{t}, const dimension& @var{x}, const dimension& @var{y}, text_style::alignment @var{a}, const text_style& @var{s});
This function places a text string on the page.  The string is given in
@var{t} and should consist of printable characters.  The position at
which the string is to be printed, measured from the bottom left corner
of the page, is given by @var{x} and @var{y}.  The alignment of the text
about this point is given by @var{a}, and the text style is given by
@var{s}.
@end deftypefun

@node The printrow class, Printing in PostScript, The printpage class, Producing printed output
@section The @code{printrow} class

Printing of rows and lines is handled by the @code{printrow} class and its
subclasses.  An object of type @code{printrow} is created, attached to
a given @code{printpage} object.  After the object has been created, it
can be given rows to print.  The rows can be printed in various ways:  the
actual numbers representing the row may or may not be printed, and lines
can be drawn for selected bells.

@menu
* Using the printrow class::    
* Row printing options::        
@end menu

@node Using the printrow class, Row printing options, The printrow class, The printrow class
@subsection Using the @code{printrow} class

A @code{printrow} object is created by one of the following constructors.
Note that there are certain options which cannot be changed once the
object has been created, so unless the default options are going to be
used it is necessary to use the second form of the constructor.

@deftypefn Constructor {} printrow::printrow (const printpage& @var{pp});
This constructor builds a @code{printrow} object associated to the
@code{printpage} object given by @var{pp}.  The options are initialised
to the default options.
@end deftypefn

@deftypefn Constructor {} printrow::printrow (const printpage& @var{pp}, const printrow::options& @var{op});
This constructor builds a @code{printrow} object associated to the
@code{printpage} object given by @var{pp}, and initialised the options
to @var{op}.
@end deftypefn

Once the @code{printrow} object has been created, it must be positioned
on the page before any rows can be printed.

@deftypefun void printrow::set_position (const dimension& @var{x}, const dimension& @var{y});
This function sets the position of the @code{printrow} object to the given
place on the page, measured from the bottom left.  The position given is 
where the first bell of the next row printed will appear.
@end deftypefun

@deftypefun void printrow::new_column(const dimension& @var{gap});
If one column of rows has already been printed, this function can be used
to start a new column.  The new column will start at the same vertical
position as the previous one, and a distance of @var{gap} further to
the right.
@end deftypefun

Certain options (@pxref{Row printing options}) may be changed while the
@code{printrow} object exists.

@deftypefun {const printrow::options&} printrow::get_options (void);
This function returns the current options.
@end deftypefun

@deftypefun void printrow::set_options (const printrow::options& @var{o});
This function sets the options to those given by @var{o}.  Note that
only certain option changes will have any effect once the object has
the object has been constructed.
@end deftypefun

After setting the position, rows can be printed.

@deftypefn Operator printrow& printrow::operator<< (const printrow& @var{pr}, const row& @var{r});
This operator is used to print a row @var{r} using the @code{printrow} 
object @var{pr}.  This prints the numbers of the row if the @code{numbers}
flag of the options is set, and also draws the lines for any bells which
have been specified in the options.  The row is printed underneath the 
previous row.
@end deftypefn

@deftypefun void printrow::rule (void);
This function draws a horizontal rule below the last row printed.
@end deftypefun

@deftypefun void printrow::dot (int @var{i});
This function draws a small dot at the place where bell @var{i} was in the
last row printed.  If @var{i} is -1, prints dots for all bells which are
having lines drawn.
@end deftypefun

@deftypefun void printrow::placebell(int @var{i});
This function finds what place the bell @var{i} was at in the last row 
printed, and then prints this number in a circle to the right of that row.
@end deftypefun

@deftypefun  void printrow::text (const string& @var{t}, const dimension& @var{x}, text_style::alignment @var{al}, bool @var{between}, bool @var{right});
This function prints some text to one side of the last row printed.  The text
is given in @var{t} and is printed in the same style as the rows.  If the
boolean argument @var{right} is true, the text is printed to the right of
the row; otherwise the text is printed to the left of the row.  The
dimension @var{x} is a distance from the leftmost or rightmost number in
the row, and the text is aligned about this point as given by @var{al}
(@pxref{The text_style class}).  If the argument @var{between} is true,
then the text is not aligned vertically with the previous row, but rather
appears halfway between the previous row and the next one to be printed.
This last option is useful, for example, for print place notation beside
a method.
@end deftypefun

@node Row printing options,  , Using the printrow class, The printrow class
@subsection Row printing options

The way in which rows are printed by a @code{printrow} object is
controlled by various options.  These options are given by a 
@code{printrow::options} object.

@example
struct options @{
  enum o_flags @{
    numbers = 0x01,
    miss_numbers = 0x02
  @};
  unsigned int flags;
  text_style style;
  dimension xspace, yspace;
  struct line_style @{
    dimension width;
  @};
  map<int, line_style> lines;

  void defaults();
@};
@end example

The @code{flags} member contains various flags; bit values are given by
the enumerated type @code{o_flags}, and possible values for @code{flags}
can be obtained by logically ORing these values together.  The bits
are as follows:
@itemize @bullet
@item
The @code{options::numbers} bit controls whether the actual numbers of the
rows are printed.  If this bit is not set, only lines will be printed.

@item
If the @code{options::miss_numbers} bit, then any numbers which would
appear underneath lines are missed out.  An example of this may be seen
in the @cite{Ringing World} diary, where all rows except lead heads are
printed with this property.
@end itemize
This option may be changed, with immediate effect, at any point during 
printing.

The @code{style} member controls the style in which the rows are
printed; for the declaration of the @code{text_style} class, see
@ref{The text_style class}.  This option may not be changed during printing.

The @code{xspace} and @code{yspace} members give the horizontal space
between numbers in a row, and the vertical space between rows, respectively.
For the declaration of the @code{dimension} class, see
@ref{The dimension class}.  These options may not be changed during 
printing.

The @code{lines} member controls which ``blue lines'' are printed.  Each
element of the map has an integer, denoting the bell number, and a
@code{line_style} element which defines the style of the line.  Currently
the only member is @code{line_style} is a @code{dimension} object giving
the width of the line.  This option may be changed in between columns,
but not in the middle of a column.

For example, suppose that we wish to print rows in 10-point Helvetica, with
spacing of 12 points horizontally and vertically.  We want to draw a
line half a point thick for the second bell.  The following code sets
up a @code{printrow::options} object to accomplish this:

@example
printrow::options o;
o.flags = printrow::options::numbers;
o.style.size = 10;
o.style.font = "Helvetica";
o.xspace.n = 12;
o.yspace.n = 12;
line_style s; s.width.n = 1; s.width.d = 2; s.width.u = dimension::points;
o.lines[1] = s;
@end example

There is one member function of @code{printrow::options}.

@deftypefun void printrow::options::defaults (void);
This function sets up the @code{printrow::options} object to the defaults
as given in the example above.
@end deftypefun

@node Printing in PostScript,  , The printrow class, Producing printed output
@section Printing in PostScript

The Ringing Class Library provides subclasses of the @code{printpage} and
@code{printrow} classes for producing output in the PostScript language.  
These classes are declared in the @file{ringing/print_ps.h} header file.
The output conforms to the Document Structuring Conventions (@acronym{DSC})
version 3.0 and uses only Level 1 language.

The @code{printpage_ps} class is derived from @code{printpage}, and handles
all output to a PostScript stream.  The new functions in this class are
constructors and some PostScript-specific operations.

@deftypefn Constructor {} printpage_ps::printpage_ps (ostream& @var{o});
This creates a new PostScript printing object, which will send its
output to the stream @var{o}.
@end deftypefn

@deftypefn Constructor {} printpage_ps::printpage_ps (ostream @var{o}, int @var{x0}, int @var{y0}, int @var{x1}, int @var{y1});
This creates a new object which will write an Encapsulated PostScript
(@acronym{EPS}) file to the stream @var{o}.  The bounding box for the
@acronym{EPS} file is specified in points by the arguments @var{x0}, @var{y0},
@var{x1} and @var{y1}.  This bounding box has no effect on where you can
print things using this object, but other applications manipulating the
@acronym{EPS} file may rely on the bounding box in order to work properly.
@end deftypefn

The @code{printrow_ps} class is for printing rows to a @code{printpage_ps}
object.  You will probably never have to deal with this class directly, as
it should be created and dealt with by the interface for the @code{printrow}
class.

@node Copying this manual, Index, Producing printed output, Top
@appendix Copying this manual

@menu
* GNU Free Documentation License::  
@end menu

@node GNU Free Documentation License,  , Copying this manual, Copying this manual
@appendixsec GNU Free Documentation License

@cindex FDL, GNU Free Documentation License
@center Version 1.1, March 2000

@display
Copyright @copyright{} 2000 Free Software Foundation, Inc.
59 Temple Place, Suite 330, Boston, MA  02111-1307, USA

Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.
@end display

@enumerate 0
@item
PREAMBLE

The purpose of this License is to make a manual, textbook, or other
written document @dfn{free} in the sense of freedom: to assure everyone
the effective freedom to copy and redistribute it, with or without
modifying it, either commercially or noncommercially.  Secondarily,
this License preserves for the author and publisher a way to get
credit for their work, while not being considered responsible for
modifications made by others.

This License is a kind of ``copyleft'', which means that derivative
works of the document must themselves be free in the same sense.  It
complements the GNU General Public License, which is a copyleft
license designed for free software.

We have designed this License in order to use it for manuals for free
software, because free software needs free documentation: a free
program should come with manuals providing the same freedoms that the
software does.  But this License is not limited to software manuals;
it can be used for any textual work, regardless of subject matter or
whether it is published as a printed book.  We recommend this License
principally for works whose purpose is instruction or reference.

@item
APPLICABILITY AND DEFINITIONS

This License applies to any manual or other work that contains a
notice placed by the copyright holder saying it can be distributed
under the terms of this License.  The ``Document'', below, refers to any
such manual or work.  Any member of the public is a licensee, and is
addressed as ``you''.

A ``Modified Version'' of the Document means any work containing the
Document or a portion of it, either copied verbatim, or with
modifications and/or translated into another language.

A ``Secondary Section'' is a named appendix or a front-matter section of
the Document that deals exclusively with the relationship of the
publishers or authors of the Document to the Document's overall subject
(or to related matters) and contains nothing that could fall directly
within that overall subject.  (For example, if the Document is in part a
textbook of mathematics, a Secondary Section may not explain any
mathematics.)  The relationship could be a matter of historical
connection with the subject or with related matters, or of legal,
commercial, philosophical, ethical or political position regarding
them.

The ``Invariant Sections'' are certain Secondary Sections whose titles
are designated, as being those of Invariant Sections, in the notice
that says that the Document is released under this License.

The ``Cover Texts'' are certain short passages of text that are listed,
as Front-Cover Texts or Back-Cover Texts, in the notice that says that
the Document is released under this License.

A ``Transparent'' copy of the Document means a machine-readable copy,
represented in a format whose specification is available to the
general public, whose contents can be viewed and edited directly and
straightforwardly with generic text editors or (for images composed of
pixels) generic paint programs or (for drawings) some widely available
drawing editor, and that is suitable for input to text formatters or
for automatic translation to a variety of formats suitable for input
to text formatters.  A copy made in an otherwise Transparent file
format whose markup has been designed to thwart or discourage
subsequent modification by readers is not Transparent.  A copy that is
not ``Transparent'' is called ``Opaque''.

Examples of suitable formats for Transparent copies include plain
@sc{ascii} without markup, Texinfo input format, La@TeX{} input format,
@acronym{SGML} or @acronym{XML} using a publicly available
@acronym{DTD}, and standard-conforming simple @acronym{HTML} designed
for human modification.  Opaque formats include PostScript,
@acronym{PDF}, proprietary formats that can be read and edited only by
proprietary word processors, @acronym{SGML} or @acronym{XML} for which
the @acronym{DTD} and/or processing tools are not generally available,
and the machine-generated @acronym{HTML} produced by some word
processors for output purposes only.

The ``Title Page'' means, for a printed book, the title page itself,
plus such following pages as are needed to hold, legibly, the material
this License requires to appear in the title page.  For works in
formats which do not have any title page as such, ``Title Page'' means
the text near the most prominent appearance of the work's title,
preceding the beginning of the body of the text.

@item
VERBATIM COPYING

You may copy and distribute the Document in any medium, either
commercially or noncommercially, provided that this License, the
copyright notices, and the license notice saying this License applies
to the Document are reproduced in all copies, and that you add no other
conditions whatsoever to those of this License.  You may not use
technical measures to obstruct or control the reading or further
copying of the copies you make or distribute.  However, you may accept
compensation in exchange for copies.  If you distribute a large enough
number of copies you must also follow the conditions in section 3.

You may also lend copies, under the same conditions stated above, and
you may publicly display copies.

@item
COPYING IN QUANTITY

If you publish printed copies of the Document numbering more than 100,
and the Document's license notice requires Cover Texts, you must enclose
the copies in covers that carry, clearly and legibly, all these Cover
Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
the back cover.  Both covers must also clearly and legibly identify
you as the publisher of these copies.  The front cover must present
the full title with all words of the title equally prominent and
visible.  You may add other material on the covers in addition.
Copying with changes limited to the covers, as long as they preserve
the title of the Document and satisfy these conditions, can be treated
as verbatim copying in other respects.

If the required texts for either cover are too voluminous to fit
legibly, you should put the first ones listed (as many as fit
reasonably) on the actual cover, and continue the rest onto adjacent
pages.

If you publish or distribute Opaque copies of the Document numbering
more than 100, you must either include a machine-readable Transparent
copy along with each Opaque copy, or state in or with each Opaque copy
a publicly-accessible computer-network location containing a complete
Transparent copy of the Document, free of added material, which the
general network-using public has access to download anonymously at no
charge using public-standard network protocols.  If you use the latter
option, you must take reasonably prudent steps, when you begin
distribution of Opaque copies in quantity, to ensure that this
Transparent copy will remain thus accessible at the stated location
until at least one year after the last time you distribute an Opaque
copy (directly or through your agents or retailers) of that edition to
the public.

It is requested, but not required, that you contact the authors of the
Document well before redistributing any large number of copies, to give
them a chance to provide you with an updated version of the Document.

@item
MODIFICATIONS

You may copy and distribute a Modified Version of the Document under
the conditions of sections 2 and 3 above, provided that you release
the Modified Version under precisely this License, with the Modified
Version filling the role of the Document, thus licensing distribution
and modification of the Modified Version to whoever possesses a copy
of it.  In addition, you must do these things in the Modified Version:

@enumerate A
@item
Use in the Title Page (and on the covers, if any) a title distinct
from that of the Document, and from those of previous versions
(which should, if there were any, be listed in the History section
of the Document).  You may use the same title as a previous version
if the original publisher of that version gives permission.

@item
List on the Title Page, as authors, one or more persons or entities
responsible for authorship of the modifications in the Modified
Version, together with at least five of the principal authors of the
Document (all of its principal authors, if it has less than five).

@item
State on the Title page the name of the publisher of the
Modified Version, as the publisher.

@item
Preserve all the copyright notices of the Document.

@item
Add an appropriate copyright notice for your modifications
adjacent to the other copyright notices.

@item
Include, immediately after the copyright notices, a license notice
giving the public permission to use the Modified Version under the
terms of this License, in the form shown in the Addendum below.

@item
Preserve in that license notice the full lists of Invariant Sections
and required Cover Texts given in the Document's license notice.

@item
Include an unaltered copy of this License.

@item
Preserve the section entitled ``History'', and its title, and add to
it an item stating at least the title, year, new authors, and
publisher of the Modified Version as given on the Title Page.  If
there is no section entitled ``History'' in the Document, create one
stating the title, year, authors, and publisher of the Document as
given on its Title Page, then add an item describing the Modified
Version as stated in the previous sentence.

@item
Preserve the network location, if any, given in the Document for
public access to a Transparent copy of the Document, and likewise
the network locations given in the Document for previous versions
it was based on.  These may be placed in the ``History'' section.
You may omit a network location for a work that was published at
least four years before the Document itself, or if the original
publisher of the version it refers to gives permission.

@item
In any section entitled ``Acknowledgments'' or ``Dedications'',
preserve the section's title, and preserve in the section all the
substance and tone of each of the contributor acknowledgments
and/or dedications given therein.

@item
Preserve all the Invariant Sections of the Document,
unaltered in their text and in their titles.  Section numbers
or the equivalent are not considered part of the section titles.

@item
Delete any section entitled ``Endorsements''.  Such a section
may not be included in the Modified Version.

@item
Do not retitle any existing section as ``Endorsements''
or to conflict in title with any Invariant Section.
@end enumerate

If the Modified Version includes new front-matter sections or
appendices that qualify as Secondary Sections and contain no material
copied from the Document, you may at your option designate some or all
of these sections as invariant.  To do this, add their titles to the
list of Invariant Sections in the Modified Version's license notice.
These titles must be distinct from any other section titles.

You may add a section entitled ``Endorsements'', provided it contains
nothing but endorsements of your Modified Version by various
parties---for example, statements of peer review or that the text has
been approved by an organization as the authoritative definition of a
standard.

You may add a passage of up to five words as a Front-Cover Text, and a
passage of up to 25 words as a Back-Cover Text, to the end of the list
of Cover Texts in the Modified Version.  Only one passage of
Front-Cover Text and one of Back-Cover Text may be added by (or
through arrangements made by) any one entity.  If the Document already
includes a cover text for the same cover, previously added by you or
by arrangement made by the same entity you are acting on behalf of,
you may not add another; but you may replace the old one, on explicit
permission from the previous publisher that added the old one.

The author(s) and publisher(s) of the Document do not by this License
give permission to use their names for publicity for or to assert or
imply endorsement of any Modified Version.

@item
COMBINING DOCUMENTS

You may combine the Document with other documents released under this
License, under the terms defined in section 4 above for modified
versions, provided that you include in the combination all of the
Invariant Sections of all of the original documents, unmodified, and
list them all as Invariant Sections of your combined work in its
license notice.

The combined work need only contain one copy of this License, and
multiple identical Invariant Sections may be replaced with a single
copy.  If there are multiple Invariant Sections with the same name but
different contents, make the title of each such section unique by
adding at the end of it, in parentheses, the name of the original
author or publisher of that section if known, or else a unique number.
Make the same adjustment to the section titles in the list of
Invariant Sections in the license notice of the combined work.

In the combination, you must combine any sections entitled ``History''
in the various original documents, forming one section entitled
``History''; likewise combine any sections entitled ``Acknowledgments'',
and any sections entitled ``Dedications''.  You must delete all sections
entitled ``Endorsements.''

@item
COLLECTIONS OF DOCUMENTS

You may make a collection consisting of the Document and other documents
released under this License, and replace the individual copies of this
License in the various documents with a single copy that is included in
the collection, provided that you follow the rules of this License for
verbatim copying of each of the documents in all other respects.

You may extract a single document from such a collection, and distribute
it individually under this License, provided you insert a copy of this
License into the extracted document, and follow this License in all
other respects regarding verbatim copying of that document.

@item
AGGREGATION WITH INDEPENDENT WORKS

A compilation of the Document or its derivatives with other separate
and independent documents or works, in or on a volume of a storage or
distribution medium, does not as a whole count as a Modified Version
of the Document, provided no compilation copyright is claimed for the
compilation.  Such a compilation is called an ``aggregate'', and this
License does not apply to the other self-contained works thus compiled
with the Document, on account of their being thus compiled, if they
are not themselves derivative works of the Document.

If the Cover Text requirement of section 3 is applicable to these
copies of the Document, then if the Document is less than one quarter
of the entire aggregate, the Document's Cover Texts may be placed on
covers that surround only the Document within the aggregate.
Otherwise they must appear on covers around the whole aggregate.

@item
TRANSLATION

Translation is considered a kind of modification, so you may
distribute translations of the Document under the terms of section 4.
Replacing Invariant Sections with translations requires special
permission from their copyright holders, but you may include
translations of some or all Invariant Sections in addition to the
original versions of these Invariant Sections.  You may include a
translation of this License provided that you also include the
original English version of this License.  In case of a disagreement
between the translation and the original English version of this
License, the original English version will prevail.

@item
TERMINATION

You may not copy, modify, sublicense, or distribute the Document except
as expressly provided for under this License.  Any other attempt to
copy, modify, sublicense or distribute the Document is void, and will
automatically terminate your rights under this License.  However,
parties who have received copies, or rights, from you under this
License will not have their licenses terminated so long as such
parties remain in full compliance.

@item
FUTURE REVISIONS OF THIS LICENSE

The Free Software Foundation may publish new, revised versions
of the GNU Free Documentation License from time to time.  Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.  See
@uref{http://www.gnu.org/copyleft/}.

Each version of the License is given a distinguishing version number.
If the Document specifies that a particular numbered version of this
License ``or any later version'' applies to it, you have the option of
following the terms and conditions either of that specified version or
of any later version that has been published (not as a draft) by the
Free Software Foundation.  If the Document does not specify a version
number of this License, you may choose any version ever published (not
as a draft) by the Free Software Foundation.
@end enumerate

@page
@appendixsubsec ADDENDUM: How to use this License for your documents

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and
license notices just after the title page:

@smallexample
@group
  Copyright (C)  @var{year}  @var{your name}.
  Permission is granted to copy, distribute and/or modify this document
  under the terms of the GNU Free Documentation License, Version 1.1
  or any later version published by the Free Software Foundation;
  with the Invariant Sections being @var{list their titles}, with the
  Front-Cover Texts being @var{list}, and with the Back-Cover Texts being @var{list}.
  A copy of the license is included in the section entitled ``GNU
  Free Documentation License''.
@end group
@end smallexample

If you have no Invariant Sections, write ``with no Invariant Sections''
instead of saying which ones are invariant.  If you have no
Front-Cover Texts, write ``no Front-Cover Texts'' instead of
``Front-Cover Texts being @var{list}''; likewise for Back-Cover Texts.

If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License,
to permit their use in free software.

@c Local Variables:
@c ispell-local-pdict: "ispell-dict"
@c End:

@node Index,  , Copying this manual, Top
@unnumbered Index

@printindex cp

@contents
@bye
